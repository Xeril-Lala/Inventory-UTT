USE INVENTORY_UTT;

-- * SP GET_ASSET_GROUP
DROP PROCEDURE IF EXISTS GET_ASSET_GROUP;
DELIMITER //
CREATE PROCEDURE GET_ASSET_GROUP (
    IN IN_CHILD_CODE      VARCHAR(100),
    IN IN_PARENT_GROUP      VARCHAR(100),
    IN IN_PARENT_SGROUP     VARCHAR(100),
    IN IN_PARENT_AGROUP     VARCHAR(100),
    IN IN_CHILD_GROUP       VARCHAR(100),
    IN IN_CHILD_AGROUP      VARCHAR(100),
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('GET_ASSET_GROUP', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';

	SELECT
	    *
	FROM
         VW_ASSET_GROUP
    WHERE
        CHILD_CODE      =   IFNULL(IN_CHILD_CODE, CHILD_CODE)
    AND PARENT_GROUP    =   IFNULL(IN_PARENT_GROUP, PARENT_GROUP)
    AND CHILD_GROUP     =   IFNULL(IN_CHILD_GROUP, CHILD_GROUP)
    AND STATUS          =   GET_STS_FN(IN_STATUS)
    OR  (
                PARENT_SGROUP   =   IFNULL(IN_PARENT_SGROUP, PARENT_SGROUP)
            OR  PARENT_AGROUP   =   IFNULL(IN_PARENT_AGROUP, PARENT_AGROUP)
            OR  CHILD_AGROUP    =   IFNULL(IN_CHILD_AGROUP, CHILD_AGROUP)
    );
END //
DELIMITER ;

-- * SP GET_USER
DROP PROCEDURE IF EXISTS GET_USER;
DELIMITER //
CREATE PROCEDURE GET_USER (
    IN IN_USERNAME          VARCHAR(20),
    IN IN_SEARCH            VARCHAR(300),
    IN IN_STATUS            BOOL,
    IN IN_GROUP             VARCHAR(10),
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
	DECLARE VAR_SEARCH VARCHAR(300) DEFAULT '';
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('GET_USER', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
	SET VAR_SEARCH = IFNULL(IN_SEARCH, '');
    
    SELECT 
		*
	FROM 
		VW_USER
	WHERE 
		USERNAME = IFNULL(IN_USERNAME, USERNAME)
	AND UPPER(CONCAT(NAME, ' ', LASTNAME)) LIKE UPPER(CONCAT('%', VAR_SEARCH ,'%'))
	AND GROUP_CODE = IFNULL(IN_GROUP, GROUP_CODE)
    AND STATUS = GET_STS_FN(IN_STATUS);
END //
DELIMITER ;

-- * SP GET_INVENTORY
DROP PROCEDURE IF EXISTS GET_INVENTORY;
DELIMITER //
CREATE PROCEDURE GET_INVENTORY (
    IN IN_ID          		INT,
    IN IN_CUSTOM_ID         VARCHAR(50),
    IN IN_SERIAL			VARCHAR(150),
    IN IN_NAME 				VARCHAR(100),
    IN IN_MODEL				VARCHAR(450),
    IN IN_FROM_DT 			DATETIME,
    IN IN_TO_DT				DATETIME,
    IN IN_USED              BOOL,
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
        SET OUT_MSG = HANDLE_EXCEPTION('GET_INVENTORY', @errno, @errmsg);
    END;
    SET OUT_MSG = 'OK';

    SELECT * FROM VW_INVENTORY
    WHERE
        (IN_ID IS NULL OR INVENTORY_ID = IN_ID)
        AND (IN_CUSTOM_ID IS NULL OR UPPER(CUSTOM_ID) LIKE UPPER(CONCAT('%', IN_CUSTOM_ID, '%')))
        AND (IN_SERIAL IS NULL OR UPPER(SERIAL) LIKE UPPER(CONCAT('%', IN_SERIAL, '%')))
        AND (IN_NAME IS NULL OR UPPER(NAME) LIKE UPPER(CONCAT('%', IN_NAME, '%')))
        AND (IN_MODEL IS NULL OR MODEL_CODE = IN_MODEL)
        AND STATUS = GET_STS_FN(IN_STATUS)
        AND (
            (IN_FROM_DT IS NULL AND IN_TO_DT IS NULL)
            OR (IN_FROM_DT IS NULL AND ACQUISITION_DT < IN_TO_DT)
            OR (IN_TO_DT IS NULL AND ACQUISITION_DT > IN_FROM_DT)
            OR (ACQUISITION_DT BETWEEN IN_FROM_DT AND IN_TO_DT)
        )
        AND IS_USED = IFNULL(IN_USED, IS_USED);
END //
DELIMITER ;

-- * SP GET_LOAN
DROP PROCEDURE IF EXISTS GET_LOAN;
DELIMITER //
CREATE PROCEDURE GET_LOAN (
    IN IN_ID                INT,
    IN IN_FROM_DT           DATETIME,
    IN IN_TO_DT             DATETIME,
    IN IN_COMMENTS          TEXT,
    IN IN_MODE              VARCHAR(100),
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
        SET OUT_MSG = HANDLE_EXCEPTION('GET_LOAN', @errno, @errmsg);
    END;
    SET OUT_MSG = 'OK';

    SELECT
        *
    FROM
        VW_LOAN
    WHERE
        (IN_ID IS NULL OR LOAN_ID = IN_ID)
    AND (IN_COMMENTS IS NULL OR UPPER(COMMENTS) LIKE UPPER(CONCAT('%', IN_COMMENTS, '%')))
    AND (IN_MODE IS NULL OR LM_CODE = IN_MODE)
    AND STATUS = GET_STS_FN(IN_STATUS)
    AND (
        (IN_FROM_DT IS NULL AND IN_TO_DT IS NULL)
        OR (IN_FROM_DT IS NULL AND LOAN_DT < IN_TO_DT)
        OR (IN_TO_DT IS NULL AND LOAN_DT > IN_FROM_DT)
        OR (LOAN_DT BETWEEN IN_FROM_DT AND IN_TO_DT)
        OR (IN_FROM_DT IS NULL AND RETURN_DT < IN_TO_DT)
        OR (IN_TO_DT IS NULL AND RETURN_DT > IN_FROM_DT)
        OR (RETURN_DT BETWEEN IN_FROM_DT AND IN_TO_DT)
    );
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_LOAN_DTL;
DELIMITER //
CREATE PROCEDURE GET_LOAN_DTL(
    IN IN_ID 				INT,
    IN IN_FROM_DT           DATETIME,
    IN IN_TO_DT             DATETIME,
    IN IN_LOAN_ID 			INT,
    IN IN_DTL_DESCRIPTION 	TEXT,
    IN IN_DTL_STS 			VARCHAR(100),
    IN IN_COMMENTS 			TEXT,
    IN IN_LOAN_MODE 		VARCHAR(100),
    IN IN_LOAN_STS 			VARCHAR(100),
    IN IN_INVENTORY_ID 		INT,
    IN IN_CUSTOM_ID 		VARCHAR(50),
    IN IN_SERIAL 			VARCHAR(150),
    IN IN_MODEL 			VARCHAR(450),
    IN IN_BRAND 			VARCHAR(450),
	IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
        SET OUT_MSG = HANDLE_EXCEPTION('GET_LOAN_DTL', @errno, @errmsg);
    END;
    SET OUT_MSG = 'OK';

    SELECT * FROM
		VW_LOAN_DTL
	WHERE 
		(IN_ID IS NULL OR LOAN_DTL_ID  = IN_ID) 
	AND (IN_LOAN_ID IS NULL OR LOAN_ID = IN_LOAN_ID)
    AND (IN_DTL_DESCRIPTION IS NULL OR UPPER(LOAN_DTL_DESC) LIKE UPPER(CONCAT('%', IN_DTL_DESCRIPTION, '%'))) 
    AND (IN_DTL_STS IS NULL OR LOAN_DTL_STS = IN_DTL_STS )
    AND (IN_COMMENTS IS NULL OR COMMENTS = IN_COMMENTS)
    AND (IN_LOAN_MODE IS NULL OR LM_CODE = IN_LOAN_MODE)
    AND (IN_LOAN_STS IS NULL OR LOAN_STS = IN_LOAN_STS )
    AND (IN_INVENTORY_ID IS NULL OR INVENTORY_ID = IN_INVENTORY_ID) 
    AND (IN_CUSTOM_ID IS NULL OR CUSTOM_ID = IN_CUSTOM_ID)
    AND (IN_SERIAL IS NULL OR SERIAL = IN_SERIAL)
    AND (IN_MODEL IS NULL OR MODEL_VALUE = IN_MODEL)
    AND (IN_BRAND IS NULL OR BRAND_VALUE = IN_BRAND)
    AND STATUS = GET_STS_FN(IN_STATUS)
    AND (
		(IN_FROM_DT IS NULL AND IN_TO_DT IS NULL)
        OR (IN_FROM_DT IS NULL AND LOAN_DT < IN_TO_DT)
        OR (IN_TO_DT IS NULL AND LOAN_DT > IN_FROM_DT)
        OR (LOAN_DT BETWEEN IN_FROM_DT AND IN_TO_DT)
        OR (IN_FROM_DT IS NULL AND RETURN_DT < IN_TO_DT)
        OR (IN_TO_DT IS NULL AND RETURN_DT > IN_FROM_DT)
        OR (RETURN_DT BETWEEN IN_FROM_DT AND IN_TO_DT)
    );
END //
DELIMITER ;