USE INVENTORY_UTT;

-- * SP SET_USER
DROP PROCEDURE IF EXISTS SET_USER;
DELIMITER //
CREATE PROCEDURE SET_USER (
    IN IN_USERNAME VARCHAR(20),
    IN IN_NAME VARCHAR(150),
    IN IN_LASTNAME VARCHAR(150),
    IN IN_PASSWORD VARCHAR(150),
    IN IN_GROUP VARCHAR(10),
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
    -- DECLARE PASS VARCHAR(100) DEFAULT SHA2(IN_PASSWORD, 256);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_USER', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
	
    UPDATE USER SET
        NAME = IFNULL(IN_NAME, NAME),
        LASTNAME = IFNULL(IN_LASTNAME, LASTNAME),
        PASSWORD = IFNULL(IN_PASSWORD, PASSWORD),
        GROUP_CODE = IFNULL(IN_GROUP, GROUP_CODE),
        STATUS = GET_STS_FN(IN_STATUS),
        UPDATED_BY = IN_USER,
        UPDATED_ON = NOW()
    WHERE
        USERNAME = IN_USERNAME;

    IF ROW_COUNT() = 0 THEN
        INSERT INTO USER
        (
            USERNAME, NAME,
            LASTNAME, PASSWORD,
            GROUP_CODE,
            STATUS, CREATED_BY
        ) VALUES
        (
            IN_USERNAME,
            IN_NAME,
            IN_LASTNAME,
            IN_PASSWORD, IN_GROUP,
            GET_STS_FN(IN_STATUS),
            IN_USER
        );
    END IF;

END //
DELIMITER ;

-- * SP SET_USER_CONTACT
DROP PROCEDURE IF EXISTS SET_USER_CONTACT;
DELIMITER //
CREATE PROCEDURE SET_USER_CONTACT (
    IN IN_USERNAME VARCHAR(20),
    IN IN_KEY1 VARCHAR(100),
    IN IN_KEY2 VARCHAR(100),
    IN IN_EMAIL1 TEXT,
    IN IN_EMAIL2 TEXT,
    IN IN_PHONE1 TEXT,
    IN IN_PHONE2 TEXT,
    IN IN_ADDRESS TEXT,
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_USER_CONTACT', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';

    UPDATE USER_CONTACT SET
        KEY1 = IFNULL(IN_KEY1, KEY1),
        KEY2 = IFNULL(IN_KEY2, KEY2),
        EMAIL1 = IFNULL(IN_EMAIL1, EMAIL1),
        EMAIL2 = IFNULL(IN_EMAIL2, EMAIL2),
        PHONE1 = IFNULL(IN_PHONE1, PHONE1),
        PHONE2 = IFNULL(IN_PHONE2, PHONE2),
        ADDRESS = IFNULL(IN_ADDRESS, ADDRESS),
        STATUS = GET_STS_FN(IN_STATUS),
        UPDATED_BY = IN_USER,
        UPDATED_ON = NOW()
    WHERE
        USERNAME = IN_USERNAME;

    IF ROW_COUNT() = 0 THEN
        INSERT INTO USER_CONTACT
        (
            USERNAME,
            KEY1, KEY2,
            EMAIL1, EMAIL2,
            PHONE1, PHONE2,
            ADDRESS, CREATED_BY
        ) VALUES
        (
            IN_USERNAME,
            IN_KEY1, IN_KEY2,
            IN_EMAIL1, IN_EMAIL2,
            IN_PHONE1, IN_PHONE2,
            IN_ADDRESS, IN_USER
        );
    END IF;

END //
DELIMITER ;

-- * SP SET_ASSET
DROP PROCEDURE IF EXISTS SET_ASSET;
DELIMITER //
CREATE PROCEDURE SET_ASSET (
    IN IN_CODE      VARCHAR(10),
    IN IN_VALUE     VARCHAR(450),
    IN IN_KEY1      VARCHAR(100),
    IN IN_KEY2      VARCHAR(100),
    IN IN_KEY3      VARCHAR(100),
    IN IN_DESC1     TEXT,
    IN IN_DESC2     TEXT,
    IN IN_DESC3     TEXT,
    IN IN_HEX_BIN   LONGTEXT,
    IN IN_USER      VARCHAR(50),
    IN IN_STATUS    BOOL,
    OUT OUT_MSG     VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_ASSET', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';

    UPDATE ASSET SET
        VALUE = IFNULL(IN_VALUE, VALUE),
        KEY1 = IFNULL(IN_KEY1, KEY1),
        KEY2 = IFNULL(IN_KEY2, KEY2),
        KEY3 = IFNULL(IN_KEY3, KEY3),
        DESC1 = IFNULL(IN_DESC1, DESC1),
        DESC2 = IFNULL(IN_DESC2, DESC2),
        DESC3 = IFNULL(IN_DESC3, DESC3),
        BIN =  IFNULL(UNHEX(IN_HEX_BIN), BIN),
        STATUS = GET_STS_FN(IN_STATUS),
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
    WHERE
        ASSET_CODE = IN_CODE;

    IF ROW_COUNT() = 0 THEN
        INSERT INTO ASSET
        (
             ASSET_CODE,
             VALUE,
             KEY1,
             KEY2,
             KEY3,
             DESC1,
             DESC2,
             DESC3,
             BIN,
             STATUS,
             CREATED_BY
        )
        VALUES
        (
            IN_CODE,
            IN_VALUE,
            IN_KEY1,
            IN_KEY2,
            IN_KEY3,
            IN_DESC1,
            IN_DESC2,
            IN_DESC3,
            UNHEX(IN_HEX_BIN),
            GET_STS_FN(IN_STATUS),
            IN_USER
        );
    END IF;
END //
DELIMITER ;

-- * SP SET_INVENTORY
DROP PROCEDURE IF EXISTS SET_INVENTORY;
DELIMITER //
CREATE PROCEDURE SET_INVENTORY (
    IN IN_ID INT,
    IN IN_CM_ID VARCHAR(50),
    IN IN_DESC TEXT,
    IN IN_NAME VARCHAR(450),
    IN IN_ACQUISITION_DT DATETIME,
    IN IN_MODEL_CODE VARCHAR(450),
    IN IN_LOCATION_CODE VARCHAR(10),
    IN IN_SERIAL VARCHAR(150),
    IN IN_CONDITION VARCHAR(500),
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_INVENTORY', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';

    UPDATE INVENTORY SET
        CUSTOM_ID = IFNULL(IN_CM_ID, CUSTOM_ID),
        DESCRIPTION = IN_DESC,
        NAME = IFNULL(IN_NAME, NAME),
        ACQUISITION_DT = IFNULL(IN_ACQUISITION_DT, NOW()),
        MODEL_CODE = IFNULL(IN_MODEL_CODE, MODEL_CODE),
        SERIAL = IFNULL(IN_SERIAL, SERIAL),
        CONDITION_USE = IN_CONDITION,
        LOCATION_CODE = IFNULL(IN_LOCATION_CODE, LOCATION_CODE),
        STATUS = GET_STS_FN(IN_STATUS),
        UPDATED_BY = IN_USER,
        UPDATED_ON = NOW()
    WHERE
        INVENTORY_ID = IN_ID;

    IF ROW_COUNT() = 0 THEN
        INSERT INTO INVENTORY
        (
            INVENTORY_ID,
            CUSTOM_ID,
            DESCRIPTION,
            NAME,
            ACQUISITION_DT,
            MODEL_CODE,
            LOCATION_CODE,
            SERIAL,
            CONDITION_USE,
            CREATED_BY,
            STATUS
         )
        VALUES
        (
            IN_ID,
            IN_CM_ID,
            IN_DESC,
            IN_NAME,
            IN_ACQUISITION_DT,
            IN_MODEL_CODE,
            IN_LOCATION_CODE,
            IN_SERIAL,
            IN_CONDITION,
            IN_USER,
            GET_STS_FN(IN_STATUS)
        );
    END IF;
END //
DELIMITER ;

-- * SP SET_LOAN_NODE
DROP PROCEDURE IF EXISTS SET_LOAN_MODE;
DELIMITER //
CREATE PROCEDURE SET_LOAN_MODE(
    IN IN_CODE VARCHAR(100),
    IN IN_UNIT VARCHAR(20),
    IN IN_DURATION BIGINT,
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_LOAN_MODE', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
    
	UPDATE LOAN_MODE SET
		DURATION_UNIT = IN_UNIT,
		DURATION = IN_DURATION,
        UPDATED_BY = IN_USER,
		UPDATED_ON = NOW(),
        STATUS = GET_STS_FN(IN_STATUS)
	WHERE
		LM_CODE = IN_CODE;
        
	IF ROW_COUNT() = 0 THEN
		INSERT INTO LOAN_MODE 
		(
			LM_CODE,
            DURATION_UNIT,
            DURATION,
			CREATED_BY,
            STATUS
        ) VALUES 
        (
			IN_CODE,
            IN_UNIT,
            IN_DURATION,
            IN_USER,
            GET_STS_FN(IN_STATUS)
        );
    END IF;
    
END //
DELIMITER ;

-- * SP SET_LOAN
DROP PROCEDURE IF EXISTS SET_LOAN;
DELIMITER //
CREATE PROCEDURE SET_LOAN (
    IN IN_ID INT,
    IN IN_COMMENT TEXT,
    IN IN_LN_DT DATETIME,
    IN IN_RN_DT DATETIME,
    IN IN_MODE VARCHAR(100),
    IN IN_LN_STS VARCHAR(100),
    IN IN_RESPONSIBLE VARCHAR(450),
    IN IN_RESPONSIBLE_KEY VARCHAR(450),
    IN IN_CONTACT1 VARCHAR(450),
    IN IN_CONTACT2 VARCHAR(450),
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_ID INT,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_LOAN', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
    SET OUT_ID = NULL;

    UPDATE LOAN SET
        COMMENTS = IN_COMMENT,
        LOAN_DT = IFNULL(IN_LN_DT, LOAN_DT),
        RETURN_DT = IFNULL(IN_RN_DT, RETURN_DT),
        LOAN_MODE = IN_MODE,
        LOAN_STATUS = IN_LN_STS,
        RESPONSIBLE = IN_RESPONSIBLE,
        RESPONSIBLE_KEY = IN_RESPONSIBLE_KEY,
        RESPONSIBLE_CONTACT1 = IN_CONTACT1,
        RESPONSIBLE_CONTACT2 = IN_CONTACT2,
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER,
        STATUS = GET_STS_FN(IN_STATUS)
    WHERE
        LOAN_ID = IN_ID;

    SET OUT_ID = IN_ID;

    IF ROW_COUNT() = 0 THEN
        INSERT INTO LOAN
        (
            LOAN_ID,
            COMMENTS, LOAN_DT,
            RETURN_DT, LOAN_MODE,
            RESPONSIBLE, RESPONSIBLE_KEY,
            RESPONSIBLE_CONTACT1, RESPONSIBLE_CONTACT2,
            LOAN_STATUS, CREATED_BY,
            STATUS
        )
        VALUES
        (
            IN_ID,
            IN_COMMENT, IFNULL(IN_LN_DT, NOW()),
            IN_RN_DT, IN_MODE,
            IN_RESPONSIBLE, IN_RESPONSIBLE_KEY,
            IN_CONTACT1, IN_CONTACT2,
            IN_LN_STS, IN_USER,
            GET_STS_FN(IN_STATUS)
        );
        SET OUT_ID = LAST_INSERT_ID();
    END IF;
END //
DELIMITER ;

-- * SP SET_LOAN_DTL;
DROP PROCEDURE IF EXISTS SET_LOAN_DTL;
DELIMITER //
CREATE PROCEDURE SET_LOAN_DTL
(
	IN IN_ID INT,
    IN IN_LOAN_ID INT,
    IN IN_INVENTORY_ID INT,
    IN IN_DESC TEXT,
    IN IN_LN_STATUS VARCHAR(100),
    IN IN_USER VARCHAR(50),
    IN IN_STATUS BOOL,
    OUT OUT_ID INT,
    OUT OUT_MSG VARCHAR(500)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('SET_LOAN_DTL', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
    
    UPDATE LOAN_DTL SET
        DESCRIPTION = IN_DESC,
        LOAN_STATUS = IN_LN_STATUS,
        STATUS = GET_STS_FN(IN_STATUS)
	WHERE 
		LOAN_ID = IN_LOAN_ID AND INVENTORY_ID = IN_INVENTORY_ID;

	SET OUT_ID = IN_ID;

    IF ROW_COUNT() = 0 THEN 
		INSERT INTO LOAN_DTL 
        (
			LOAN_DTL_ID,
            LOAN_ID,
            INVENTORY_ID,
            DESCRIPTION,
            LOAN_STATUS,
            CREATED_BY,
            STATUS
        ) VALUES (
			IN_ID,
            IN_LOAN_ID,
            IN_INVENTORY_ID,
            IN_DESC,
            IN_LN_STATUS,
            IN_USER,
            GET_STS_FN(IN_STATUS)
        );
		SET OUT_ID = LAST_INSERT_ID();
    END IF;
END //
DELIMITER ;

-- * SP SET_LOAN_LOCATION
# DROP PROCEDURE IF EXISTS SET_LOAN_LOCATION;
# DELIMITER //
# CREATE PROCEDURE SET_LOAN_LOCATION
# (
# 	IN IN_ID INT,
#     IN IN_CODE VARCHAR(450),
#     IN IN_DESC TEXT,
#     IN IN_USER VARCHAR(50),
#     IN IN_STATUS VARCHAR(40),
#     OUT OUT_MSG VARCHAR(500)
# ) BEGIN
# 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
#     BEGIN
# 		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
# 		SET OUT_MSG = HANDLE_EXCEPTION('SET_LOAN_LOCATION', @errno, @errmsg);
# 	END;
#
#     SET OUT_MSG = 'OK';
#
#     UPDATE LOAN_LOCATION SET
# 		LOCATION_CODE = IN_CODE,
# 		DESCRIPTION = IN_DESC,
#         STATUS = GET_STS_FN(IN_STATUS),
#         UPDATED_BY = IN_USER,
#         UPDATED_ON = NOW()
# 	WHERE
# 		LOAN_ID = IN_ID;
#
# 	IF ROW_COUNT() = 0 THEN
# 		INSERT INTO LOAN_LOCATION
# 		(
# 		    LOAN_ID, LOCATION_CODE, DESCRIPTION,
# 		    STATUS, CREATED_BY
#         ) VALUES
#         (
#             IN_ID, IN_CODE, IN_DESC,
#             GET_STS_FN(IN_STATUS), IN_USER
#         );
#     END IF;
# END //
# DELIMITER ;

-- * FN AUTH_USER;
DROP FUNCTION IF EXISTS AUTH_USER;
DELIMITER //
CREATE FUNCTION AUTH_USER (
    IN_USER VARCHAR(20),
    IN_PASSWORD TEXT
)
RETURNS BOOL DETERMINISTIC
BEGIN
    RETURN EXISTS(
        SELECT
            USERNAME
        FROM
            USER
        WHERE
            USERNAME = IN_USER
        AND PASSWORD = IN_PASSWORD
        AND STATUS = 'ENABLED'
    );
END //
DELIMITER ;