USE INVENTORY_UTT;

-- * SP GET_ASSET_GROUP
DROP PROCEDURE IF EXISTS GET_ASSET_GROUP;
DELIMITER //
CREATE PROCEDURE GET_ASSET_GROUP (
    IN IN_CHILD_CODE      VARCHAR(100),
    IN IN_PARENT_GROUP      VARCHAR(100),
    IN IN_PARENT_SGROUP     VARCHAR(100),
    IN IN_PARENT_AGROUP     VARCHAR(100),
    IN IN_CHILD_GROUP       VARCHAR(100),
    IN IN_CHILD_AGROUP      VARCHAR(100),
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('GET_ASSET_GROUP', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';

	SELECT
	    *
	FROM
         VW_ASSET_GROUP
    WHERE
        CHILD_CODE      =   IFNULL(IN_CHILD_CODE, CHILD_CODE)
    AND PARENT_GROUP    =   IFNULL(IN_PARENT_GROUP, PARENT_GROUP)
    AND CHILD_GROUP     =   IFNULL(IN_CHILD_GROUP, CHILD_GROUP)
    AND STATUS          =   GET_STS_FN(IN_STATUS)
    OR  (
                PARENT_SGROUP   =   IFNULL(IN_PARENT_SGROUP, PARENT_SGROUP)
            OR  PARENT_AGROUP   =   IFNULL(IN_PARENT_AGROUP, PARENT_AGROUP)
            OR  CHILD_AGROUP    =   IFNULL(IN_CHILD_AGROUP, CHILD_AGROUP)
    );
END //
DELIMITER ;

-- * SP GET_USER
DROP PROCEDURE IF EXISTS GET_USER;
DELIMITER //
CREATE PROCEDURE GET_USER (
    IN IN_USERNAME          VARCHAR(20),
    IN IN_SEARCH            VARCHAR(300),
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
	DECLARE VAR_SEARCH VARCHAR(300) DEFAULT '';
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('GET_USER', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
	SET VAR_SEARCH = IFNULL(IN_SEARCH, '');
    
    SELECT 
		*
	FROM 
		VW_USER
	WHERE 
		USERNAME = IFNULL(IN_USERNAME, USERNAME)
	AND UPPER(CONCAT(NAME, ' ', LASTNAME)) LIKE UPPER(CONCAT('%', VAR_SEARCH ,'%'))
    AND STATUS = GET_STS_FN(IN_STATUS);
END //
DELIMITER ;

-- * SP GET_INVENTORY
DROP PROCEDURE IF EXISTS GET_INVENTORY;
DELIMITER //
CREATE PROCEDURE GET_INVENTORY (
    IN IN_ID          		INT,
    IN IN_CUSTOM_ID         VARCHAR(50),
    IN IN_SERIAL			VARCHAR(150),
    IN IN_NAME 				VARCHAR(100),
    IN IN_MODEL				VARCHAR(450),
    IN IN_FROM_DT 			DATETIME,
    IN IN_TO_DT				DATETIME,
    IN IN_STATUS            BOOL,
    OUT OUT_MSG             VARCHAR(450)
) BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = HANDLE_EXCEPTION('GET_INVENTORY', @errno, @errmsg);
	END;
    SET OUT_MSG = 'OK';
    
    IF IN_ID IS NULL AND IN_CUSTOM_ID IS NULL AND IN_SERIAL IS NULL AND IN_NAME IS NULL AND IN_MODEL IS NULL AND IN_FROM_DT IS NULL AND IN_TO_DT IS NULL
    THEN
		SELECT * FROM VW_INVENTORY;
	ELSE 
		WITH INV_LS AS (
			SELECT 
				* 
			FROM 
				VW_INVENTORY 
			WHERE 
				( 		IF (IN_CUSTOM_ID IS NULL OR IN_CUSTOM_ID = '', FALSE , UPPER(CUSTOM_ID) LIKE UPPER( CONCAT('%', IN_CUSTOM_ID, '%')))
					OR 	IF (IN_SERIAL IS NULL OR IN_SERIAL = '', FALSE, UPPER(SERIAL) LIKE UPPER(CONCAT('%', IN_SERIAL, '%')))
					OR 	IF (IN_NAME IS NULL OR IN_NAME = '', FALSE, UPPER(NAME) LIKE UPPER(CONCAT('%', IN_NAME, '%')))
				) 
			AND STATUS = GET_STS_FN(IN_STATUS)
		), INV_CD AS (
			SELECT 
				* 
			FROM 
				VW_INVENTORY 
			WHERE 
				INVENTORY_ID = IN_ID
			OR CUSTOM_ID = IN_CUSTOM_ID
			OR SERIAL = IN_SERIAL
			OR MODEL_CODE = IN_MODEL
			OR STATUS = GET_STS_FN(IN_STATUS)
		), INV_FULL AS ( 
			SELECT * FROM INV_LS 
				UNION 
			SELECT * FROM INV_CD
		) SELECT 
			* 
		FROM 
			INV_FULL 
		WHERE 
			CASE 
				WHEN 
					IN_FROM_DT IS NULL AND IN_TO_DT IS NULL 
				THEN 
					TRUE
				WHEN 
					IN_FROM_DT IS NULL
				THEN
					ACQUISITION_DT < IN_TO_DT
				WHEN 
					IN_TO_DT IS NULL
				THEN
					ACQUISITION_DT > IN_FROM_DT
				ELSE
					ACQUISITION_DT BETWEEN IN_FROM_DT AND IN_TO_DT
			END
		;
    END IF;
END //
DELIMITER ;

CALL GET_INVENTORY(
	100,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    FALSE,
    @msg
);